// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (id, created_at, updated_at, name, description, link, owner_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4
)
RETURNING id, created_at, updated_at, name, description, link, owner_id
`

type CreateRecipeParams struct {
	Name        string
	Description string
	Link        string
	OwnerID     uuid.UUID
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.Description,
		arg.Link,
		arg.OwnerID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Link,
		&i.OwnerID,
	)
	return i, err
}

const deleteRecipeByID = `-- name: DeleteRecipeByID :exec
DELETE FROM recipes WHERE id = $1
`

func (q *Queries) DeleteRecipeByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeByID, id)
	return err
}

const getAllRecipes = `-- name: GetAllRecipes :many
SELECT id, created_at, updated_at, name, description, link, owner_id FROM recipes
`

func (q *Queries) GetAllRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getAllRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Link,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, created_at, updated_at, name, description, link, owner_id FROM recipes WHERE id = $1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Link,
		&i.OwnerID,
	)
	return i, err
}

const getRecipesByName = `-- name: GetRecipesByName :many
SELECT id, created_at, updated_at, name, description, link, owner_id FROM recipes WHERE name = $1
`

func (q *Queries) GetRecipesByName(ctx context.Context, name string) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipesByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Link,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
