// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ingredients.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (id, created_at, updated_at, name, unit, owner_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3
)
RETURNING id, created_at, updated_at, name, unit, owner_id
`

type CreateIngredientParams struct {
	Name    string
	Unit    string
	OwnerID uuid.UUID
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.Name, arg.Unit, arg.OwnerID)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Unit,
		&i.OwnerID,
	)
	return i, err
}

const deleteIngrendientByID = `-- name: DeleteIngrendientByID :exec
DELETE FROM ingredients WHERE id = $1
`

func (q *Queries) DeleteIngrendientByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteIngrendientByID, id)
	return err
}

const getAllIngredients = `-- name: GetAllIngredients :many
SELECT id, created_at, updated_at, name, unit, owner_id FROM ingredients
`

func (q *Queries) GetAllIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getAllIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Unit,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientByID = `-- name: GetIngredientByID :one
SELECT id, created_at, updated_at, name, unit, owner_id FROM ingredients WHERE id = $1
`

func (q *Queries) GetIngredientByID(ctx context.Context, id uuid.UUID) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredientByID, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Unit,
		&i.OwnerID,
	)
	return i, err
}

const getIngredientsByName = `-- name: GetIngredientsByName :many
SELECT id, created_at, updated_at, name, unit, owner_id FROM ingredients WHERE name = $1
`

func (q *Queries) GetIngredientsByName(ctx context.Context, name string) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredientsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Unit,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
