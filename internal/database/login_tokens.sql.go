// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: login_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLoginToken = `-- name: CreateLoginToken :one
INSERT INTO login_tokens (token, user_id, created_at, expire_at)
VALUES (
    gen_random_uuid(), $1, NOW(), NOW() + interval '1 hour'
)
RETURNING token, user_id, created_at, expire_at
`

func (q *Queries) CreateLoginToken(ctx context.Context, userID uuid.UUID) (LoginToken, error) {
	row := q.db.QueryRowContext(ctx, createLoginToken, userID)
	var i LoginToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM login_tokens WHERE token = $1
`

func (q *Queries) DeleteToken(ctx context.Context, token uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteToken, token)
	return err
}

const getLoginByToken = `-- name: GetLoginByToken :one
SELECT token, user_id, created_at, expire_at FROM login_tokens WHERE token = $1
`

func (q *Queries) GetLoginByToken(ctx context.Context, token uuid.UUID) (LoginToken, error) {
	row := q.db.QueryRowContext(ctx, getLoginByToken, token)
	var i LoginToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const getTokenByUserID = `-- name: GetTokenByUserID :one
SELECT token, user_id, created_at, expire_at FROM login_tokens WHERE user_id = $1
`

func (q *Queries) GetTokenByUserID(ctx context.Context, userID uuid.UUID) (LoginToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserID, userID)
	var i LoginToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}
